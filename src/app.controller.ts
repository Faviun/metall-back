import { Controller, Delete, Get, Logger, Query } from '@nestjs/common';
import { AppService } from './app.service';
import { GetProductsService } from './database/get-products.service';
import { DeleteProductsService } from './database/delete-products.service';
import { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';

@ApiTags('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏')
@Controller()
export class AppController {
  constructor(
    private readonly appService: AppService,
    private readonly productsDb: GetProductsService,
    private readonly deleteService: DeleteProductsService,
  ) {}

  private readonly logger = new Logger(AppController.name);
  private readonly MAX_LIMIT = 100;

  private normalizePagination(page?: string, limit?: string): { skip: number; take: number } {
    const pageNum = Math.max(1, Number(page) || 1);
    const take = Math.min(Number(limit) || this.MAX_LIMIT, this.MAX_LIMIT);
    const skip = (pageNum - 1) * take;
    return { skip, take };
  }

  @Get()
  @ApiOperation({ summary: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' })
  @ApiResponse({ status: 200, description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' })
  getHello(): string {
    return this.appService.getHello();
  }

  @Get('data')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã' })
  @ApiQuery({ name: 'page', required: false, example: '1', description: '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã' })
  @ApiQuery({
    name: 'limit',
    required: false,
    example: '100',
    description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
  })
  @ApiQuery({
    name: 'provider',
    required: false,
    example: 'brokinvest,mc,dipos',
    description: '–ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
  })
  @ApiResponse({
    status: 200,
    description: '–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ',
    schema: {
      example: {
        message: 'üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã',
        provider: ['mc', 'dipos'],
        total: 5000,
        perPage: 100,
        products: [
          {
            title: '–ê—Ä–º–∞—Ç—É—Ä–∞ A500C',
            price: 45000,
            unit: '—Ç–Ω',
            link: 'https://example.com/product/1',
          },
        ],
      },
    },
  })
  @ApiResponse({ status: 500, description: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' })
  async getSavedData(
    @Query('page') page = '1',
    @Query('limit') limit = '100',
    @Query('provider') provider?: string | string[],
  ) {
    try {
      const { skip, take } = this.normalizePagination(page, limit);

      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      const providerList = Array.isArray(provider)
        ? provider
        : provider
          ? provider.split(',')
          : undefined;

      const [products, total] = await Promise.all([
        this.productsDb.getProducts(providerList, { skip, take }),
        this.productsDb.countProducts(providerList),
      ]);

      return {
        message: 'üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã',
        provider: providerList || '–í—Å–µ',
        total,
        perPage: take,
        products,
      };
    } catch (error) {
      return {
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        error: error.message,
      };
    }
  }

  @Delete('data')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –∏ –≤–æ–∑—Ä–∞—Å—Ç—É' })
  @ApiQuery({
    name: 'provider',
    required: false,
    example: 'mc',
    description: '–ü—Ä–æ–≤–∞–π–¥–µ—Ä, —á—å–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å',
  })
  @ApiQuery({
    name: 'days',
    required: false,
    example: '30',
    description: '–£–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π',
  })
  @ApiResponse({
    status: 200,
    description: '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
    schema: {
      example: {
        message: 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        provider: 'mc',
        olderThanDays: 30,
        deletedCount: 123,
      },
    },
  })
  @ApiResponse({ status: 500, description: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' })
  async deleteData(
    @Query('provider') provider?: string | string[],
    @Query('days') daysRaw?: string,
  ) {
    try {
      const days = daysRaw ? Number(daysRaw) : undefined;

      const result = await this.deleteService.deleteByProviderAndAge(provider, days);

      return {
        message: 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        provider: provider || '–Ω–µ —É–∫–∞–∑–∞–Ω',
        olderThanDays: days || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        deletedCount: result.count,
      };
    } catch (error) {
      return {
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        error: error.message,
      };
    }
  }

  @Get('delete-manual') //–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  @ApiOperation({ summary: '–†—É—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)' })
  @ApiQuery({
    name: 'provider',
    required: false,
    example: 'dipos',
    description: '–ü—Ä–æ–≤–∞–π–¥–µ—Ä, —á—å–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å',
  })
  @ApiQuery({
    name: 'days',
    required: false,
    example: '10',
    description: '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –¥–Ω–µ–π',
  })
  @ApiResponse({
    status: 200,
    description: '–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
    schema: {
      example: {
        message: 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é',
        deletedCount: 45,
      },
    },
  })
  async deleteManual(
    @Query('provider') provider?: string | string[],
    @Query('days') daysRaw?: string,
  ) {
    const days = daysRaw ? Number(daysRaw) : undefined;
    const result = await this.deleteService.deleteByProviderAndAge(provider, days);
    return {
      message: 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é',
      deletedCount: result.count,
    };
  }
}
