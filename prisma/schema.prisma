generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String
}

model Parser {
  id          Int     @id @default(autoincrement())
  provider    String
  category    String
  description String?
  name        String
  size        String?
  mark        String?
  length      String?
  location    String?
  price1      String?
  price2      String?
  image       String?
  link        String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MetalProduct {
  id           Int     @id @default(autoincrement())
  name         String
  description  String?
  category     String
  material     String
  grade        String?
  standard     String?
  surface      String?
  coating      String?
  shape        String
  length       Float?
  width        Float?
  height       Float?
  diameter     Float?
  thickness    Float?
  weight       Float?
  unit         String
  quantity     Int
  pricePerUnit Float?
  supplierId   Int?
  warehouseId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  supplier  Supplier?  @relation(fields: [supplierId], references: [id])
  warehouse Warehouse? @relation(fields: [warehouseId], references: [id])

  priceHistory   PriceHistory[]
  images         ProductImage[]
  stockMovements StockMovement[]
}

model Supplier {
  id            Int     @id @default(autoincrement())
  name          String
  contactPerson String?
  phone         String?
  email         String?
  address       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products MetalProduct[]
}

model Warehouse {
  id       Int     @id @default(autoincrement())
  name     String
  location String
  manager  String?
  phone    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products      MetalProduct[]
  movementsFrom StockMovement[] @relation("FromWarehouse")
  movementsTo   StockMovement[] @relation("ToWarehouse")
}

model PriceHistory {
  id            Int      @id @default(autoincrement())
  productId     Int
  price         Float
  effectiveFrom DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product MetalProduct @relation(fields: [productId], references: [id])
}

model ProductImage {
  id          Int     @id @default(autoincrement())
  productId   Int
  url         String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product MetalProduct @relation(fields: [productId], references: [id])
}

model StockMovement {
  id              Int      @id @default(autoincrement())
  productId       Int
  fromWarehouseId Int?
  toWarehouseId   Int?
  quantity        Int
  movedAt         DateTime @default(now())
  comment         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product       MetalProduct @relation(fields: [productId], references: [id])
  fromWarehouse Warehouse?   @relation("FromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouse   Warehouse?   @relation("ToWarehouse", fields: [toWarehouseId], references: [id])
}
