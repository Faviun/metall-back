import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { Product } from 'src/types/product.type';

@Injectable()
export class SaveProductsService {
  private readonly logger = new Logger(SaveProductsService.name);

  constructor(private readonly prisma: PrismaService) {}

  private readonly BATCH_SIZE = 100;

  async saveMany(products: Product[]) {
    const normalizedProducts = products
      .filter((p) => p) // –∑–∞—â–∏—Ç–∞ –æ—Ç undefined/null
      .map((p) => ({
        ...p,
        link: p.link?.trim() || null, // –∑–∞–º–µ–Ω—è–µ–º '' –Ω–∞ null
      }));

    for (let i = 0; i < normalizedProducts.length; i += this.BATCH_SIZE) {
      const batch = normalizedProducts.slice(i, i + this.BATCH_SIZE);

      try {
        await this.prisma.$transaction(
          batch.map((product) => {
            if (product.link) {
              // upsert –ø–æ link
              return this.prisma.parser.upsert({
                where: { link: product.link },
                update: {
                  provider: product.provider,
                  category: product.category,
                  name: product.name,
                  size: product.size,
                  mark: product.mark,
                  length: product.length,
                  weight: product.weight,
                  location: product.location,
                  price1: product.price1,
                  price2: product.price2,
                  price3: product.price3,
                  units1: product.units1,
                  units2: product.units2,
                  units3: product.units3,
                  image: product.image,
                  available: product.available,
                },
                create: product,
              });
            } else {
              // –µ—Å–ª–∏ link –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ create
              return this.prisma.parser.create({ data: product });
            }
          }),
        );

        this.logger.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${i + batch.length} / ${normalizedProducts.length}`);
      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏ —Å ${i} –ø–æ ${i + batch.length}: ${error.message}`);
      }
    }

    this.logger.log(`üéâ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${normalizedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
  }
}
