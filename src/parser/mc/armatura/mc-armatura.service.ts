import { Injectable, Logger } from '@nestjs/common';
import * as puppeteer from 'puppeteer';
import * as XLSX from 'xlsx';
import * as fs from 'fs';
import * as path from 'path';

type Product = {
  provider: string;
  category: string;
  name: string;
  size: string;
  mark: string;
  length: string;
  location: string;
  stock: string;
  price: string;
  image: string;
  link: string;
};

@Injectable()
export class McParserService {
  private readonly logger = new Logger(McParserService.name);

  private readonly categories = [
    {
      url: 'https://mc.ru/metalloprokat/armatura_riflenaya_a3',
      name: '–ê—Ä–º–∞—Ç—É—Ä–∞ —Ä–∏—Ñ–ª—ë–Ω–∞—è –ê3',
    },
    {
      url: 'https://mc.ru/metalloprokat/armatura_gladkaya_a1',
      name: '–ê—Ä–º–∞—Ç—É—Ä–∞ –≥–ª–∞–¥–∫–∞—è –ê1',
    },
    {
      url: 'https://mc.ru/metalloprokat/armatura_at800',
      name: '–ê—Ä–º–∞—Ç—É—Ä–∞ –ê800',
    },
    {
      url: 'https://mc.ru/metalloprokat/katanka',
      name: '–ö–∞—Ç–∞–Ω–∫–∞',
    },
    {
      url: 'https://mc.ru/metalloprokat/provoloka_torgovaya_obyknovennogo_kachestva_otozhzhenaya',
      name: '–ü—Ä–æ–≤–æ–ª–æ–∫–∞ –æ—Ç–æ–∂–∂–µ–Ω–Ω–∞—è',
    },
  ];

  async parseCategory(url: string, category: string): Promise<Product[]> {
    const browser = await puppeteer.launch({ headless: true });
    const page = await browser.newPage();
    const allProducts: Product[] = [];
    const seenFirstItems = new Set<string>();

    for (let pageNum = 1; pageNum <= 50; pageNum++) {
      const pageUrl = pageNum === 1 ? url : `${url}/PageN/${pageNum}`;

      await page.goto(pageUrl, { waitUntil: 'networkidle2' });
      try {
        await page.waitForSelector('tr[data-nm]', { timeout: 10000 });
      } catch {
        this.logger.warn(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`);
        break;
      }

      const products = await page.evaluate((category) => {
        const rows = Array.from(document.querySelectorAll('tr[data-nm]'));
        return rows.map((row) => {
          const provider = '–ú–ï–¢–ê–õ–õ –°–ï–†–í–ò–°';
          const name = row.getAttribute('data-nm')?.trim() || '';
          const size = row.querySelector('td._razmer')?.textContent?.trim() || '';
          const mark = row.querySelector('td._mark')?.textContent?.trim() || '';
          const length = row.querySelector('td._dlina')?.textContent?.trim() || '';
          const location = row.querySelector('td._fact')?.textContent?.trim() || '';
          const stock = row.querySelector('td._ost')?.textContent?.replace(/\s+/g, '') || '';
          const price = row.querySelector('meta[itemprop="price"]')?.getAttribute('content') || '';
          const imgRelative = row.querySelector('img.Picture')?.getAttribute('src') || '';
          const image = imgRelative ? `https://mc.ru${imgRelative}` : '';
          const href = row.querySelector('a')?.getAttribute('href') || '';
          const link = href ? `https://mc.ru${href}` : '';

          return {
            provider,
            category,
            name,
            size,
            mark,
            length,
            location,
            stock,
            price,
            image,
            link,
          };
        });
      }, category);

      if (products.length === 0) {
        this.logger.log(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum} –ø—É—Å—Ç–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.`);
        break;
      }

      const firstKey = `${products[0].name}|${products[0].mark}|${products[0].length}`;
      if (seenFirstItems.has(firstKey)) {
        this.logger.log(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum} –¥—É–±–ª–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.`);
        break;
      }

      seenFirstItems.add(firstKey);
      allProducts.push(...products);
      this.logger.log(`‚úÖ [${category}] –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    }

    await browser.close();
    return allProducts;
  }

  async parseAll() {
    const allResults: Product[] = [];

    for (const cat of this.categories) {
      this.logger.log(`–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${cat.name}`);
      const products = await this.parseCategory(cat.url, cat.name);
      const valid = products.filter((p) => p.name && p.price && !isNaN(parseFloat(p.price)));

      this.logger.log(`–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${cat.name}" –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
      this.logger.log(`–ü—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${valid.length}`);

      if (valid.length === 0) {
        this.logger.warn(`‚ùå –í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${cat.name}".`);
        continue;
      }

      allResults.push(...valid);
    }

    return {
      total: allResults.length,
      products: allResults,
    };
  }

  async exportToExcel(products: Product[], fileName = 'products.xlsx') {
    const ws = XLSX.utils.json_to_sheet(products);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–¢–æ–≤–∞—Ä—ã');

    const filePath = path.join(__dirname, '..', '..', 'exports', fileName);
    fs.mkdirSync(path.dirname(filePath), { recursive: true });
    XLSX.writeFile(wb, filePath);

    this.logger.log(`üìÅ Excel-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${filePath}`);
  }

  async parseAndExport() {
    const { products } = await this.parseAll();
    await this.exportToExcel(products);
  }
}