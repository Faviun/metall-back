import { Controller, Get, Res } from '@nestjs/common';
import { McParserService } from './mc-armatura.service';
import { Response } from 'express';
import * as path from 'path';
import * as fs from 'fs';

@Controller('parser-mc')
export class McParserController {
  constructor(private readonly parserService: McParserService) {}

  @Get('parse')
    async parseAll() {
    // return this.parserService.parseAll();
    const { products } = await this.parserService.parseAll();

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É
    await this.parserService.saveToDatabase(products);

    // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return {
      message: '‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É',
      total: products.length,
    };
  }

  @Get('data')
    async getSavedData() {
    const products = await this.parserService.getFromDatabase();
    return {
      message: 'üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã',
      total: products.length,
      products,
    };
  }

  @Get('download')
    async downloadExcel(@Res() res: Response) {
    const fileName = 'products.xlsx';

    // 1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∏ —ç–∫—Å–ø–æ—Ä—Ç
    // const { products } = await this.parserService.parseAll();
    await this.parserService.exportToExcelFromDb(fileName);

    // 2. –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const filePath = path.join(__dirname, '..', '..', 'exports', fileName);

    // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    if (!fs.existsSync(filePath)) {
      return res.status(404).send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    res.setHeader(
      'Content-Disposition',
      `attachment; filename="${encodeURIComponent(fileName)}"`
    );
    res.setHeader(
      'Content-Type',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    );

    const stream = fs.createReadStream(filePath);
    stream.pipe(res);
  }
}
