import { Injectable, Logger } from '@nestjs/common';
import * as puppeteer from 'puppeteer';
import * as fs from 'fs';
import { mcCategories } from './mc-categories';
import { SaveProductsService } from 'src/database/save-products.service';
import { Product } from 'src/types/product.type';
import { ExportExcelProductsService } from 'src/database/export-excel.service';
import { getExcelStreamFromDb } from 'src/utils/excel.helper';
import { allCategories } from 'src/utils/categories';
import { nameUnific } from 'src/utils/name-unific';

function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

const STREAM_LIMIT = 1; // –ö–æ–ª-–≤–æ –ø–æ—Ç–æ–∫–æ–≤

async function retryPageGoto(
  page: puppeteer.Page,
  url: string,
  options: puppeteer.WaitForOptions = {},
  retries = 3,
): Promise<void> {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      await page.goto(url, { waitUntil: 'networkidle2', ...options });
      return;
    } catch (err) {
      if (attempt < retries) {
        console.warn(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã... URL: ${url}`);
        await sleep(3000 + Math.random() * 2000);
      } else {
        throw new Error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫: ${url}`);
      }
    }
  }
}

@Injectable()
export class McParserService {
  private readonly logger = new Logger(McParserService.name);
  private readonly mcCategories = mcCategories;
  private readonly categories = allCategories;
  private readonly PROVIDER = 'mc';
  private isRunning = false;
  private cancelRequested = false;

  constructor(
    private readonly saveProducts: SaveProductsService,
    private readonly exportService: ExportExcelProductsService,
  ) {}

  /** –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ã –ø–∞—Ä—Å–µ—Ä–∞ */
  cancelParsing(): void {
    if (!this.isRunning) {
      this.logger.warn('–ü–∞—Ä—Å–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –æ—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ.');
      return;
    }
    this.cancelRequested = true;
    this.logger.warn('–û—Ç–º–µ–Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞.');
  }

  /** –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏—Å—Ö–æ–¥–Ω–∞—è –ª–æ–≥–∏–∫–∞, —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –æ—Ç–º–µ–Ω—ã/–∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞) */
  async parseCategory(url: string, category: string): Promise<void> {
    if (this.isRunning) {
      this.logger.warn('‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.');
      return;
    }

    this.isRunning = true;
    // –Ω–µ —Ç—Ä–æ–≥–∞–µ–º cancelRequested –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã–∑–æ–≤ –∏–∑ parseAll –º–æ–≥ –∑–∞–¥–∞–≤–∞—Ç—å —Ñ–ª–∞–≥ –¥–æ –Ω–∞—á–∞–ª–∞,
    // –Ω–æ –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é ‚Äî –æ—á–∏—â–∞–µ–º
    this.cancelRequested = false;

    let browser: puppeteer.Browser | null = null;

    try {
      browser = await puppeteer.launch({ headless: true });
      const page = await browser.newPage();

      await page.setUserAgent(
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
      );
      await page.setExtraHTTPHeaders({
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
      });

      const seenFirstItems = new Set<string>();

      // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (1..1000)
      for (let pageNum = 1; pageNum <= 1000; pageNum++) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (this.cancelRequested) {
          this.logger.warn('‚õî –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.');
          throw new Error('–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω—ë–Ω');
        }

        const pageUrl = `${url}${pageNum}`;
        await retryPageGoto(page, pageUrl);

        try {
          await page.waitForSelector('tr[data-nm]', { timeout: 10000 });
        } catch {
          this.logger.warn(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`);
          break;
        }

        const rawProducts: Product[] = await page.evaluate(
          (category, provider) => {
            const rows = Array.from(document.querySelectorAll('tr[data-nm]'));
            return rows.map((row) => {
              const name = row.getAttribute('data-nm')?.trim() || '';
              const size = row.querySelector('td._razmer')?.textContent?.trim() || '';
              const mark = row.querySelector('td._mark')?.textContent?.trim() || '';
              const length = row.querySelector('td._dlina')?.textContent?.trim() || '';
              const location = row.querySelector('td._fact')?.textContent?.trim() || '';
              const price1 =
                +(row.querySelector('td._ost')?.textContent?.replace(/\s+/g, '') || 0) || null;
              const price2 =
                +(row.querySelector('meta[itemprop="price"]')?.getAttribute('content') || 0) ||
                null;

              const unit1Element = document.querySelector('li.excludeMobile.ost a.catalogFilter');
              const unit1Label = unit1Element?.childNodes[0]?.textContent?.trim() || '';
              const unit1Range =
                unit1Element?.querySelector('span.categoryGroup')?.textContent?.trim() || '';
              const units1 = `${unit1Label} ${unit1Range}`.replace(/\s+/g, ' ').trim();

              const unit2Element =
                document.querySelector('li._price._center a.catalogFilter') ||
                document.querySelector('li.excludeMobile a.catalogFilter');
              const unit2Label = unit2Element?.childNodes[0]?.textContent?.trim() || '';
              const unit2Range =
                unit2Element?.querySelector('span.categoryGroup')?.textContent?.trim() || '';
              const units2 = `${unit2Label} ${unit2Range}`.replace(/\s+/g, ' ').trim();

              const imgRelative = row.querySelector('img.Picture')?.getAttribute('src') || '';
              const image = imgRelative ? `https://mc.ru${imgRelative}` : '';
              const available = !row.querySelector('button.catIcon._phone._bas');
              const href = row.querySelector('a')?.getAttribute('href') || '';
              const link = href ? `https://mc.ru${href}` : '';

              const today = new Date().toISOString().split('T')[0];
              const uniqueString = name + mark + price1 + link + today;

              return {
                provider,
                category,
                name,
                size,
                mark,
                length,
                location,
                price1,
                price2,
                units1,
                units2,
                available,
                image,
                link,
                weight: '',
                price3: null,
                units3: '',
                uniqueString,
                description: name || '',
              };
            });
          },
          category,
          this.PROVIDER,
        );

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é —É–∂–µ –≤ Node.js (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
        const products = rawProducts.map((p) => {
          const uName = nameUnific(p.name);
          const foundCategory = this.categories.find((cat) => p.name.includes(cat)) || '–î—Ä—É–≥–æ–µ';
          return {
            ...p,
            name: uName.raw || p.name,
            category: foundCategory,
          };
        });

        if (products.length === 0) {
          this.logger.log(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum} –ø—É—Å—Ç–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.`);
          break;
        }

        const firstKey = `${products[0].name}|${products[0].mark}|${products[0].length}|${products[0].link}`;
        if (seenFirstItems.has(firstKey)) {
          this.logger.log(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum} –¥—É–±–ª–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.`);
          break;
        }

        seenFirstItems.add(firstKey);

        const valid = products.filter(
          (p) =>
            p.name &&
            ((p.price1 && !isNaN(p.price1)) || (p.price2 && !isNaN(p.price2))) &&
            p.available === true,
        );

        if (valid.length > 0) {
          await this.saveToDatabase(valid);
          this.logger.log(
            `‚úÖ [${category}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNum}: ${valid.length}`,
          );
        } else {
          this.logger.warn(`‚ö†Ô∏è [${category}] –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ)
        if (this.cancelRequested) {
          this.logger.warn('‚õî –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.');
          throw new Error('–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω—ë–Ω');
        }

        await sleep(1000 + Math.random() * 2000);
      } // –∫–æ–Ω–µ—Ü for pageNum
    } catch (err: any) {
      if (err && err.message === '–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω—ë–Ω') {
        this.logger.warn('üö´ –ü–∞—Ä—Å–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
      } else {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}: ${err?.message || err}`);
      }
    } finally {
      // –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ isRunning
      if (browser) {
        try {
          await browser.close();
        } catch (e) {
          // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        }
      }
      this.isRunning = false;

      if (this.cancelRequested) {
        this.logger.warn('‚õî –ü–∞—Ä—Å–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
      }
    }
  }

  async parseAll(): Promise<void> {
    const queue = [...this.mcCategories];
    const active: Promise<void>[] = [];

    const runNext = async () => {
      // –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
      if (this.cancelRequested) return;

      if (queue.length === 0) return;

      const cat = queue.shift();
      if (!cat) return;

      this.logger.log(`‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${cat.name}`);
      try {
        await this.parseCategory(cat.url, cat.name);
        // –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–∏ parseCategory ‚Äî –≤—ã–π–¥–µ–º
        if (this.cancelRequested) return;
        await sleep(2000 + Math.random() * 3000);
      } catch (e: any) {
        // –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏
        if (e && e.message === '–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω—ë–Ω') {
          this.logger.warn(`–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${cat.name}`);
          return;
        }
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${cat.name}: ${e?.message || e}`);
      }

      // –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
      await runNext();
    };

    for (let i = 0; i < STREAM_LIMIT; i++) {
      active.push(runNext());
    }

    await Promise.all(active);
  }

  async saveToDatabase(products: Product[]): Promise<void> {
    await this.saveProducts.saveMany(products);
  }

  async exportToExcelFromDb(
    provider = this.PROVIDER,
    fileName = `${provider}.xlsx`,
  ): Promise<void> {
    await this.exportService.exportToExcelFromDb(fileName, provider);
  }

  async getExcelStream(provider: string): Promise<fs.ReadStream> {
    return getExcelStreamFromDb(this.exportToExcelFromDb.bind(this), provider);
  }
}
