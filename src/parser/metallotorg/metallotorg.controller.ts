import { Controller, Get, Query, Res, Logger } from '@nestjs/common';
import { MetallotorgParserService } from './metallotorg.service';
import { Response } from 'express';
import * as path from 'path';
import * as fs from 'fs';
import { GetProductsService } from 'src/database/get-products.service';
import { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';

@ApiTags('–ü–∞—Ä—Å–µ—Ä Metallotorg')
@Controller('parser-metallotorg')
export class MetallotorgParserController {
  private readonly logger = new Logger(MetallotorgParserController.name);
  private readonly MAX_LIMIT = 100;
  private readonly PROVIDER_NAME = 'metallotorg';

  constructor(
    private readonly parserService: MetallotorgParserService,
    private readonly productsDb: GetProductsService,
  ) {}

  private normalizePagination(page?: string, limit?: string): { skip: number; take: number } {
    const pageNum = Math.max(1, Number(page) || 1);
    const take = Math.min(Number(limit) || this.MAX_LIMIT, this.MAX_LIMIT);
    const skip = (pageNum - 1) * take;
    return { skip, take };
  }

  @Get('parse')
  @ApiOperation({ summary: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä Metallotorg' })
  @ApiResponse({ status: 200, description: '–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω' })
  async parseAndSave() {
    await this.parserService.parseCategory();

    return {
      message: '‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –ø–æ –º–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.',
    };
  }

  @Get('data')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã' })
  @ApiQuery({ name: 'page', required: false, example: '1', description: '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã' })
  @ApiQuery({
    name: 'limit',
    required: false,
    example: '100',
    description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
  })
  @ApiResponse({
    status: 200,
    description: '–ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞',
    schema: {
      example: {
        message: 'üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã',
        total: 3012,
        perPage: 100,
        products: [
          {
            id: 19898,
            provider: 'metallotorg',
            category: '–ü–æ–∫–æ–≤–∫–∞',
            name: '–ü–æ–∫–æ–≤–∫–∞ —Å—Ç–∞–ª—å 09–ì2–° 670(640) –º–º',
            size: '670(640) –º–º',
            length: '–±/–æ–±—Ç–æ—á–∫–∏',
            mark: '–ì–û–°–¢ 8479-70, 19281-2014, –£–ó–ö-',
            weight: '2468.260',
            units1: '–¶–µ–Ω–∞ 1 - 5 —Ç.',
            price1: '161890 —Ä—É–±.',
            units2: '–¶–µ–Ω–∞ –æ—Ç 5 —Ç. –¥–æ 15 —Ç.',
            price2: '160890 —Ä—É–±.',
            units3: '–¶–µ–Ω–∞ \u003E 15 —Ç.',
            price3: '159890 —Ä—É–±.',
            location: '–≠–ª–µ–∫—Ç—Ä–æ—É–≥–ª–∏ (–ú–æ—Å–∫–≤–∞)',
            link: 'https://metallotorg.ru/info/metallobaza/elektrougli/pokovka/pokovka-st09g2s/rzm-670640-mm/dl-b-obtochki/',
            createdAt: '2025-07-31T05:11:57.485Z',
            updatedAt: '2025-07-31T05:11:57.485Z',
            available: null,
            image: null,
          },
        ],
      },
    },
  })
  @ApiResponse({ status: 500, description: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' })
  async getSavedData(@Query('page') page = '1', @Query('limit') limit = '100') {
    try {
      const { skip, take } = this.normalizePagination(page, limit);
      const provider = 'metallotorg';

      const [products, total] = await Promise.all([
        this.productsDb.getProducts(provider, { skip, take }),
        this.productsDb.countProducts(provider),
      ]);

      return {
        message: 'üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã',
        total,
        perPage: take,
        products,
      };
    } catch (error) {
      return {
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        error: error.message,
      };
    }
  }

  @Get('download')
  @ApiOperation({ summary: '–°–∫–∞—á–∞—Ç—å Excel-—Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ Metallotorg' })
  @ApiResponse({ status: 200, description: '–§–∞–π–ª Excel —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' })
  @ApiResponse({ status: 404, description: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' })
  @ApiResponse({ status: 500, description: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞' })
  async downloadExcel(@Res() res: Response) {
    const provider = this.PROVIDER_NAME;
    const fileName = `${provider}.xlsx`;
    const filePath = path.join(process.cwd(), 'exports', fileName);

    try {
      await this.parserService.exportToExcelFromDb(filePath, provider);

      if (!fs.existsSync(filePath)) {
        return res.status(404).send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      res.setHeader(
        'Content-Disposition',
        `attachment; filename="${encodeURIComponent(fileName)}"`,
      );
      res.setHeader(
        'Content-Type',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      );

      const stream = fs.createReadStream(filePath);
      stream.pipe(res);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
      return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    }
  }
}
